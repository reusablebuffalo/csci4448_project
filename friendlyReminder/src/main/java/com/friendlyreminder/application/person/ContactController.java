package com.friendlyreminder.application.person;

import com.friendlyreminder.application.book.ContactBook;
import com.friendlyreminder.application.book.ContactBookRepository;
import com.friendlyreminder.application.event.CommunicationEvent;
import com.friendlyreminder.application.event.CommunicationEventRepository;

import com.friendlyreminder.application.util.RelativeImportance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpSession;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping(path="/contacts") // This means URL's start with /contacts
public class ContactController {

    // This means to get the bean called contactRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final ContactRepository contactRepository;
    private final CommunicationEventRepository communicationEventRepository;
    private final UserRepository userRepository;
    private final ContactBookRepository contactBookRepository;

    @Autowired
    public ContactController(ContactRepository contactRepository, CommunicationEventRepository communicationEventRepository,
                             UserRepository userRepository, ContactBookRepository contactBookRepository) {
        this.contactRepository = contactRepository;
        this.communicationEventRepository = communicationEventRepository;
        this.userRepository = userRepository;
        this.contactBookRepository = contactBookRepository;
    }

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewContact (@RequestParam String firstName
            , @RequestParam String lastName, @RequestParam String phoneNumber, @RequestParam String username, @RequestParam String contactBook) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        List<User> users = userRepository.findByUsername(username);
        if(!users.isEmpty()) {
            for(ContactBook book :users.get(0).getContactBookList()) {
                if(book.getName().equals(contactBook)){
                    Contact n = new Contact();
                    n.setFirstName(firstName);
                    n.setLastName(lastName);
                    n.setPhoneNumber(phoneNumber);
                    contactRepository.save(n);
                    book.addContact(n);
                    userRepository.save(users.get(0));
                    return "Contact Saved To Contact Book"; // eventually will redirect back to home after add
                }
            }
            return "Contact Book not Found.";

        } else {
            return "User could not be found.";
        }
    }


    @GetMapping(path="/all")
    public @ResponseBody Iterable<Contact> getAllContacts() {
        // This returns a JSON or XML with the contact list
        return contactRepository.findAll();
    }

    @GetMapping(path="/find") // Map ONLY GET Requests
    public @ResponseBody List<Contact> findContactByFirstName (@RequestParam String firstName) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        return contactRepository.findByFirstName(firstName);
    }

    @GetMapping(path="/events")
    public @ResponseBody List<CommunicationEvent> getContactEvents (@RequestParam String firstName, @RequestParam String lastName) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        List<Contact> contacts = contactRepository.findByFirstNameAndLastName(firstName, lastName);
        List<CommunicationEvent> events = new ArrayList<>();
        for (Contact contact:contacts) {
            events.addAll(contact.getCommunicationEvents());
        }
        return events;
    }
}