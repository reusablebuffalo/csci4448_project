package com.friendlyreminder.application.person;

import com.friendlyreminder.application.event.CommunicationEvent;
import com.friendlyreminder.application.event.CommunicationEventRepository;
import com.friendlyreminder.application.util.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/contacts") // This means URL's start with /contacts (after Application path)
public class ContactController {

    // This means to get the bean called contactRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final ContactRepository contactRepository;
    private final CommunicationEventRepository communicationEventRepository;

    @Autowired
    public ContactController(ContactRepository contactRepository, CommunicationEventRepository communicationEventRepository) {
        this.contactRepository = contactRepository;
        this.communicationEventRepository = communicationEventRepository;
    }

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String firstName
            , @RequestParam String lastName, @RequestParam String phoneNumber) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Contact n = new Contact();
        n.setFirstName(firstName);
        n.setLastName(lastName);
        n.setPhoneNumber(phoneNumber);
        contactRepository.save(n);
        return "Contact Saved To Contact Book"; // eventually will redirect back to home after add
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Contact> getAllContacts() {
        // This returns a JSON or XML with the contact list
        return contactRepository.findAll();
    }

    @GetMapping(path="/find") // Map ONLY GET Requests
    public @ResponseBody List<Contact> findContactByFirstName (@RequestParam String firstName) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        return contactRepository.findByFirstName(firstName);
    }

    @GetMapping(path="/events")
    public @ResponseBody List<CommunicationEvent> getContactEvents (@RequestParam String firstName, @RequestParam String lastName) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        List<Contact> contacts = contactRepository.findByFirstNameAndLastName(firstName, lastName);
        List<CommunicationEvent> events = new ArrayList<>();
        for (Contact contact:contacts) {
            events.addAll(contact.getCommunicationEvents());
        }
        return events;
    }
}